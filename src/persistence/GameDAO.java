package persistence;

import business.entities.Game;
import persistence.persistenceExceptions.*;

import java.util.List;

/**
 * Interface that will be used to retrive the game table information from the database.
 */
public interface GameDAO {
    /**
     * This method will implement a way to get a list of games finished with their user from the database.
     * @return Returns a List object with the finished games.
     * @throws FileNotFound if the data source file is not found
     * @throws DBGeneralException if a general database error occurs
     */
    public List<Game> getGamesFinishedForStats() throws FileNotFound, DBGeneralException;// throws StatsNotFound;

    /**
     * This method will implement a way to get a list of the games finished by a user name or game name from the database.
     * @param userNameSearch Name of the user that will be used in the search.
     * @param gameNameSearch Name of the game tha will be used in the search.
     * @return Returns a List object with the finished games.
     * @throws FileNotFound if the data source file is not found
     * @throws DBGeneralException if a general database error occurs
     */
    public List<Game> searchGamesFinished(String userNameSearch, String gameNameSearch) throws FileNotFound, DBGeneralException;// throws GameNotFound;

    /**
     * This method will implement a way to get a Game instance with its Game Id.
     * @param gameID Number of the Game Id that will be used in the search.
     * @return Returns a Game instance.
     * @throws FileNotFound if the data source file is not found
     * @throws DBGeneralException if a general database error occurs
     */
    public Game getGameById(int gameID) throws FileNotFound, DBGeneralException;// throws GameNotFound;

    /**
     * This method will implement a way to get a Game instance by the Game Name or the User Id.
     * @param gameName String of the Game Name that will be used in the search.
     * @param userId String of the User Id that will be used in the search.
     * @return Returns a Game instance.
     * @throws FileNotFound if the data source file is not found
     * @throws DBGeneralException if a general database error occurs
     */
    public Game getGameByNameAndGame(String gameName, String userId) throws FileNotFound, DBGeneralException;// throws GameNotFound;

    /**
     * This method will implement a way to make a register in the database to make a new game with a Game Name and the Users Mail
     * @param gameName String of the Game Name that will be used in the register to the database.
     * @param correo Stirng of the User Mail that will be used in the register to the database.
     * @return Returns a number with the Game Id generated by the database.
     * @throws DBGeneralException if a general database error occurs
     */
    public int insertGame(String gameName, String correo) throws DBGeneralException;

    /**
     * This method will implement a way to get a Game instance of the started game from a user.
     * @param correo String with the User Mail that will be used in the search.
     * @return Returns a Game instance.
     * @throws FileNotFound if the data source file is not found
     * @throws DBGeneralException if a general database error occurs
     */
    public Game getStartedGame(String correo) throws FileNotFound, DBGeneralException;// throws GameNotFound;

    /**
     * This method will implement a way to update the game state.
     * @param game Instance of the game that will be updated.
     * @throws DBGeneralException if a general database error occurs
     */
    public void updateGameState(Game game) throws DBGeneralException;
}